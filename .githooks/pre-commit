#!/bin/bash
# Pre-commit hook for documentation validation
# Install: ln -sf ../../.githooks/pre-commit .git/hooks/pre-commit

echo "üìö Validating documentation..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if any .md files are being committed
MD_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.md$')

if [ -z "$MD_FILES" ]; then
    echo -e "${GREEN}‚úì${NC} No markdown files to validate"
    exit 0
fi

echo "Found $(echo "$MD_FILES" | wc -l) markdown file(s) to validate:"
echo "$MD_FILES" | sed 's/^/  - /'

# Validation checks
ERRORS=0
WARNINGS=0

for file in $MD_FILES; do
    if [ ! -f "$file" ]; then
        continue
    fi

    echo -e "\nChecking: $file"

    # Check 1: Terminal format (status box)
    if ! grep -q "‚îå‚îÄ.*‚îÄ‚îê" "$file"; then
        echo -e "${YELLOW}  ‚ö† Warning:${NC} Missing terminal-style status box"
        WARNINGS=$((WARNINGS + 1))
    else
        echo -e "${GREEN}  ‚úì${NC} Has terminal format"
    fi

    # Check 2: Navigation JSON
    if ! grep -q '"parent":\|"current":' "$file"; then
        echo -e "${YELLOW}  ‚ö† Warning:${NC} Missing navigation JSON"
        WARNINGS=$((WARNINGS + 1))
    else
        echo -e "${GREEN}  ‚úì${NC} Has navigation JSON"
    fi

    # Check 3: Single H1 header
    H1_COUNT=$(grep -c "^# " "$file")
    if [ "$H1_COUNT" -ne 1 ]; then
        echo -e "${RED}  ‚úó Error:${NC} Should have exactly 1 H1 header (found $H1_COUNT)"
        ERRORS=$((ERRORS + 1))
    else
        echo -e "${GREEN}  ‚úì${NC} Proper header hierarchy"
    fi

    # Check 4: File size warning (>1000 lines)
    LINE_COUNT=$(wc -l < "$file")
    if [ "$LINE_COUNT" -gt 1000 ]; then
        echo -e "${YELLOW}  ‚ö† Warning:${NC} Large file ($LINE_COUNT lines) - consider splitting"
        WARNINGS=$((WARNINGS + 1))
    fi

    # Check 5: Check for broken internal links
    BROKEN_LINKS=$(grep -o '\[.*\]([^)]*\.md[^)]*)' "$file" | grep -o '([^)]*)' | tr -d '()' | while read -r link; do
        # Skip URLs and anchors
        if [[ "$link" == http* ]] || [[ "$link" == \#* ]]; then
            continue
        fi
        # Get the directory of the current file
        DIR=$(dirname "$file")
        # Resolve the link path relative to the file
        LINK_PATH="$DIR/$link"
        # Normalize the path
        LINK_PATH=$(realpath -m "$LINK_PATH" 2>/dev/null)
        if [ ! -f "$LINK_PATH" ]; then
            echo "$link"
        fi
    done)

    if [ -n "$BROKEN_LINKS" ]; then
        echo -e "${RED}  ‚úó Error:${NC} Broken internal links found:"
        echo "$BROKEN_LINKS" | sed 's/^/      - /'
        ERRORS=$((ERRORS + 1))
    fi
done

# Summary
echo -e "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üìä Documentation Validation Summary:"

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ All checks passed!${NC}"
elif [ $ERRORS -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  $WARNINGS warning(s) found${NC}"
    echo -e "${GREEN}‚úÖ No errors - proceeding with commit${NC}"
else
    echo -e "${RED}‚ùå $ERRORS error(s) and $WARNINGS warning(s) found${NC}"
    echo -e "${RED}Commit blocked due to documentation errors${NC}"
fi

echo -e "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"

# Optional: Run Python validator if it exists
if [ -f "scripts/validate-docs.py" ]; then
    echo "Running full documentation validator..."
    python3 scripts/validate-docs.py --quiet --files "$MD_FILES" 2>/dev/null
fi

# Block commit if there are errors
if [ $ERRORS -gt 0 ]; then
    echo -e "${RED}‚ùå Please fix the errors above before committing${NC}"
    echo -e "\nTo bypass this check (not recommended):"
    echo "  git commit --no-verify"
    exit 1
fi

exit 0