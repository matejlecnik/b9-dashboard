name: Lighthouse CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  lighthouse:
    name: Lighthouse Performance Testing
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@latest
          lhci autorun --config=lighthouserc.js || echo "Lighthouse CI assertions failed"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci
          retention-days: 7

      - name: Format Lighthouse score
        if: always()
        id: format_lighthouse_score
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(
              fs.readFileSync('.lighthouseci/manifest.json', 'utf8')
            );

            const summary = results[0].summary;
            const comment = `## üèÜ Lighthouse Performance Results

            | Metric | Score |
            |--------|-------|
            | Performance | ${summary.performance * 100}% |
            | Accessibility | ${summary.accessibility * 100}% |
            | Best Practices | ${summary['best-practices'] * 100}% |
            | SEO | ${summary.seo * 100}% |

            [View full report](${results[0].url})`;

            return comment;

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = ${{ steps.format_lighthouse_score.outputs.result }};
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  lighthouse-budget-check:
    name: Performance Budget Check
    runs-on: ubuntu-latest
    needs: lighthouse

    steps:
      - name: Download Lighthouse results
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci

      - name: Check performance budgets
        run: |
          echo "Checking performance budgets..."
          # Add custom budget checking logic here

      - name: Fail if budgets exceeded
        if: failure()
        run: |
          echo "‚ùå Performance budgets exceeded!"
          echo "Please review the Lighthouse report and optimize your changes."
          exit 1