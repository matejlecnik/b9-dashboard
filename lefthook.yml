# Lefthook Configuration - Enhanced v2.0
# Fast parallel git hooks with documentation automation
# See: docs/development/SYSTEM_IMPROVEMENT_PLAN.md#lefthook-integration

# Global settings
colors: true
no_tty: false
skip_in_ci: true

# Pre-commit hook - runs before git commit
pre-commit:
  parallel: true
  commands:
    # Documentation validation
    docs-validation:
      glob: "*.md"
      run: python3 docs/scripts/validate-docs.py {staged_files}
      stage_fixed: true
      tags: [documentation]

    # Update metrics before commit (quick run - only if significant time passed)
    update-metrics:
      run: |
        if [ -f "docs/scripts/automation/metrics-daemon.py" ]; then
          # Only update if metrics are older than 30 minutes
          if [ -f "docs/data/metrics.json" ]; then
            AGE=$(($(date +%s) - $(stat -f%m docs/data/metrics.json 2>/dev/null || stat -c%Y docs/data/metrics.json 2>/dev/null)))
            if [ $AGE -gt 1800 ]; then
              echo "üìä Updating metrics (older than 30 min)..."
              python3 docs/scripts/automation/metrics-daemon.py 2>/dev/null || true
            fi
          else
            python3 docs/scripts/automation/metrics-daemon.py 2>/dev/null || true
          fi
        fi
      tags: [metrics]

    # Update search index only if .md files actually changed
    update-search:
      glob: "*.md"
      run: |
        if [ -f "docs/scripts/search/doc-search.py" ]; then
          # Incremental update is fast, always run if .md changed
          python3 docs/scripts/search/doc-search.py 2>/dev/null || true
        fi
      tags: [search]

    # TypeScript type checking
    typescript-check:
      glob: "*.{ts,tsx}"
      run: cd dashboard && npx tsc --noEmit
      skip:
        - merge
        - rebase
      tags: [typescript]

    # ESLint with auto-fix
    eslint:
      glob: "dashboard/**/*.{ts,tsx,js,jsx}"
      run: |
        FILES=$(echo {staged_files} | sed 's|dashboard/||g')
        cd dashboard && npx eslint --fix --max-warnings 0 $FILES
      stage_fixed: true
      tags: [javascript]

    # Console.log detection (block commits with console statements)
    console-check:
      glob: "dashboard/**/*.{ts,tsx,js,jsx}"
      exclude: ".*\\.test\\.(ts|tsx|js|jsx)$"
      run: |
        if grep -n 'console\.' {staged_files} 2>/dev/null; then
          echo "‚ùå Console statements detected. Remove them or add to exceptions."
          exit 1
        fi
      tags: [quality]

    # Python formatting
    python-format:
      glob: "*.py"
      run: black --check {staged_files}
      stage_fixed: true
      tags: [python]

    # Python linting with Ruff (fast!)
    python-lint:
      glob: "*.py"
      run: |
        if command -v ruff &> /dev/null; then
          ruff check {staged_files} --fix
        else
          echo "‚ö†Ô∏è  Ruff not installed. Install: pip install ruff"
        fi
      stage_fixed: true
      tags: [python]

    # Check for hardcoded secrets
    secrets-check:
      glob: "*"
      exclude: ".*\\.(md|json|lock)$"
      run: |
        if grep -E '(api_key|secret_key|password|token)\s*=\s*["'"'"'][^"'"'"']+["'"'"']' {staged_files} 2>/dev/null; then
          echo "‚ö†Ô∏è  Warning: Potential hardcoded secret found"
        fi
      tags: [security]

# Pre-push hook - runs before git push
pre-push:
  commands:
    # Full code quality check (blocks push if critical errors)
    code-quality:
      run: |
        echo "üîç Running full code quality validation..."
        python3 docs/scripts/validation/code-quality-check.py
        if [ $? -ne 0 ]; then
          echo "‚ùå Code quality check failed. Fix errors before pushing."
          echo "   Run: python3 docs/scripts/validation/code-quality-check.py"
          exit 1
        fi
        echo "‚úÖ Code quality: All checks passed"
      tags: [quality]

    # Design system compliance check (blocks push if violations found)
    design-system:
      run: |
        echo "üé® Checking design system compliance..."
        python3 docs/scripts/validation/design-system-check.py
        if [ $? -ne 0 ]; then
          echo "‚ùå Design system violations found. Fix before pushing."
          echo "   Run: python3 docs/scripts/validation/design-system-check.py"
          exit 1
        fi
        echo "‚úÖ Design system: 100% compliant"
      tags: [design]

    # Full documentation compliance check
    docs-compliance:
      run: |
        COMPLIANCE=$(python3 docs/scripts/validate-docs.py | grep -o '[0-9]*\.[0-9]*%' | head -1 | tr -d '%')
        if (( $(echo "$COMPLIANCE < 80" | bc -l) )); then
          echo "‚ùå Documentation compliance $COMPLIANCE% below 80%. Run: python3 docs/scripts/validate-docs.py"
          exit 1
        fi
        echo "‚úÖ Documentation compliance: $COMPLIANCE%"

    # Build check (ensure code compiles)
    build-check:
      run: cd dashboard && npm run build
      skip:
        - merge
        - rebase

# Post-commit hook - runs after successful commit
post-commit:
  commands:
    # Auto-log session to SESSION_LOG.md
    session-log:
      run: |
        if [ -f "docs/scripts/automation/session-logger.py" ]; then
          python3 docs/scripts/automation/session-logger.py --commits 1 2>/dev/null || true
        fi
      tags: [documentation]

    # Update CLAUDE.md with latest metrics
    update-claude:
      run: |
        if [ -f "docs/scripts/automation/template-processor.py" ]; then
          python3 docs/scripts/automation/template-processor.py CLAUDE.md 2>/dev/null || true
        fi
      tags: [metrics]

# Post-checkout hook - runs after git checkout
post-checkout:
  commands:
    # Remind about dependency updates
    deps-check:
      run: |
        echo "üì¶ Checking for dependency updates..."
        if [ -f "dashboard/package.json" ]; then
          cd dashboard && npm outdated || true
        fi
      tags: [dependencies]

    # Rebuild search index after branch switch
    rebuild-search:
      run: |
        if [ -f "docs/scripts/search/doc-search.py" ]; then
          echo "üîç Rebuilding documentation search index..."
          python3 docs/scripts/search/doc-search.py --rebuild 2>/dev/null || true
        fi
      tags: [search]

# Commit-msg hook - validates commit message format
commit-msg:
  commands:
    # Enforce conventional commits (optional)
    message-format:
      run: |
        MSG=$(cat {1})
        if ! echo "$MSG" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf)(\(.+\))?:"; then
          echo "‚ö†Ô∏è  Commit message doesn't follow conventional format"
          echo "   Expected: type(scope): message"
          echo "   Example: feat(docs): add semantic versioning"
          echo "   Types: feat, fix, docs, style, refactor, test, chore, perf"
        fi
      tags: [convention]

# Manual commands - run with: lefthook run <command>
manual:
  commands:
    # Full metrics update
    metrics-full:
      run: |
        echo "üìä Updating all metrics..."
        python3 docs/scripts/automation/metrics-daemon.py --once
        python3 docs/scripts/automation/template-processor.py --process-all
        echo "‚úÖ Metrics updated"
      tags: [metrics]

    # Interactive documentation search
    search-docs:
      run: python3 docs/scripts/search/doc-search.py
      tags: [search]

    # Force metrics update (normally automatic)
    metrics-now:
      run: |
        echo "üìä Updating metrics..."
        python3 docs/scripts/automation/metrics-daemon.py
        echo "‚úÖ Metrics updated"
      tags: [metrics]

    # Generate documentation report
    docs-report:
      run: |
        echo "üìù Generating documentation report..."
        python3 docs/scripts/validate-docs.py --json > docs/validation-report.json
        echo "‚úÖ Report saved to docs/validation-report.json"
      tags: [documentation]

    # Full code quality check
    quality-check:
      run: |
        echo "üîç Running full code quality validation..."
        python3 docs/scripts/validation/code-quality-check.py
        echo "‚úÖ Code quality check complete"
      tags: [quality]

    # Quick code quality check (staged files only)
    quality-quick:
      run: |
        echo "‚ö° Quick quality check..."
        python3 docs/scripts/validation/code-quality-check.py --quick
        echo "‚úÖ Quick check complete"
      tags: [quality]

    # Code quality dashboard
    quality-dashboard:
      run: |
        echo "üìä Generating code quality dashboard..."
        python3 docs/scripts/validation/quality-dashboard.py
      tags: [quality]

    # Design system compliance check
    design-check:
      run: |
        echo "üé® Checking design system compliance..."
        python3 docs/scripts/validation/design-system-check.py
      tags: [design]
