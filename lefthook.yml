# Lefthook Configuration - Optimized v2.1
# Fast git hooks with proper timeouts
# See: docs/development/SYSTEM_IMPROVEMENT_PLAN.md#lefthook-integration

# Global settings
colors: true
no_tty: false
skip_in_ci: true

# Pre-commit hook - runs before git commit
pre-commit:
  parallel: true
  commands:
    # TypeScript type checking
    typescript-check:
      glob: "dashboard/**/*.{ts,tsx}"
      run: cd dashboard && npx tsc --noEmit
      skip:
        - merge
        - rebase
      tags: [typescript]

    # ESLint with auto-fix
    eslint:
      glob: "dashboard/**/*.{ts,tsx,js,jsx}"
      run: |
        FILES=$(echo {staged_files} | sed 's|dashboard/||g')
        cd dashboard && npx eslint --fix --max-warnings 0 $FILES
      stage_fixed: true
      tags: [javascript]

    # Console.log detection (block commits with console statements)
    console-check:
      glob: "dashboard/**/*.{ts,tsx,js,jsx}"
      exclude: ".*\\.test\\.(ts|tsx|js|jsx)$"
      run: |
        if grep -n 'console\.' {staged_files} 2>/dev/null; then
          echo "❌ Console statements detected. Remove them or add to exceptions."
          exit 1
        fi
      tags: [quality]

    # Python formatting
    python-format:
      glob: "*.py"
      run: black --check {staged_files}
      stage_fixed: true
      tags: [python]

    # Python linting with Ruff (fast!)
    python-lint:
      glob: "*.py"
      run: |
        if command -v ruff &> /dev/null; then
          ruff check {staged_files} --fix
        else
          echo "⚠️  Ruff not installed. Install: pip install ruff"
        fi
      stage_fixed: true
      tags: [python]

    # Check for hardcoded secrets
    secrets-check:
      glob: "*"
      exclude: ".*\\.(md|json|lock)$"
      run: |
        if grep -E '(api_key|secret_key|password|token)\s*=\s*["'"'"'][^"'"'"']+["'"'"']' {staged_files} 2>/dev/null; then
          echo "⚠️  Warning: Potential hardcoded secret found"
        fi
      tags: [security]

# Pre-push hook - LIGHTWEIGHT (only critical checks)
pre-push:
  commands:
    # Quick TypeScript check only
    typescript-check:
      run: cd dashboard && npx tsc --noEmit
      tags: [typescript]

    # Quick ESLint check (no fix, just validate)
    eslint-check:
      run: cd dashboard && npx eslint --max-warnings 0 "src/**/*.{ts,tsx}"
      tags: [javascript]

# Post-commit hook - runs after successful commit
post-commit:
  commands:
    # Auto-log session to SESSION_LOG.md
    session-log:
      run: |
        if [ -f "docs/scripts/automation/session-logger.py" ]; then
          timeout 5 python3 docs/scripts/automation/session-logger.py --commits 1 2>/dev/null || true
        fi
      tags: [documentation]

    # Update CLAUDE.md with latest metrics
    update-claude:
      run: |
        if [ -f "docs/scripts/automation/template-processor.py" ]; then
          timeout 5 python3 docs/scripts/automation/template-processor.py CLAUDE.md 2>/dev/null || true
        fi
      tags: [metrics]

# Post-checkout hook - runs after git checkout
post-checkout:
  commands:
    # Remind about dependency updates
    deps-check:
      run: |
        echo "📦 Checking for dependency updates..."
        if [ -f "dashboard/package.json" ]; then
          cd dashboard && timeout 10 npm outdated || true
        fi
      tags: [dependencies]

# Commit-msg hook - validates commit message format
commit-msg:
  commands:
    # Enforce conventional commits (warning only, doesn't block)
    message-format:
      run: |
        MSG=$(cat {1})
        if ! echo "$MSG" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|🔧|📝|✨|🐛|♻️|🧪|🎨|⚡)"; then
          echo "⚠️  Commit message doesn't follow conventional format"
          echo "   Expected: type(scope): message or emoji prefix"
          echo "   Example: feat(docs): add semantic versioning"
          echo "   Types: feat, fix, docs, style, refactor, test, chore, perf"
          echo "   Emojis: 🔧 ✨ 🐛 📝 ♻️ 🧪 🎨 ⚡"
        fi
      tags: [convention]

# Manual commands - run with: lefthook run <command>
manual:
  commands:
    # Full build test (use this before pushing to production)
    build-full:
      run: cd dashboard && npm run build
      tags: [build]

    # Full metrics update
    metrics-full:
      run: |
        echo "📊 Updating all metrics..."
        python3 docs/scripts/automation/metrics-daemon.py --once
        python3 docs/scripts/automation/template-processor.py --process-all
        echo "✅ Metrics updated"
      tags: [metrics]

    # Interactive documentation search
    search-docs:
      run: python3 docs/scripts/search/doc-search.py
      tags: [search]

    # Force metrics update
    metrics-now:
      run: |
        echo "📊 Updating metrics..."
        python3 docs/scripts/automation/metrics-daemon.py
        echo "✅ Metrics updated"
      tags: [metrics]

    # Generate documentation report
    docs-report:
      run: |
        echo "📝 Generating documentation report..."
        python3 docs/scripts/validate-docs.py --json > docs/validation-report.json
        echo "✅ Report saved to docs/validation-report.json"
      tags: [documentation]

    # Full code quality check
    quality-check:
      run: |
        echo "🔍 Running full code quality validation..."
        python3 docs/scripts/validation/code-quality-check.py
        echo "✅ Code quality check complete"
      tags: [quality]

    # Design system compliance check
    design-check:
      run: |
        echo "🎨 Checking design system compliance..."
        python3 docs/scripts/validation/design-system-check.py
      tags: [design]

    # Documentation validation
    docs-validate:
      run: |
        echo "📚 Validating documentation..."
        python3 docs/scripts/validate-docs.py
      tags: [documentation]
