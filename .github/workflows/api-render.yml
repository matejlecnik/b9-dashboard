name: API Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'api-render/**'
      - '.github/workflows/api-render.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'api-render/**'
      - '.github/workflows/api-render.yml'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  RENDER_API_URL: 'https://b9-dashboard.onrender.com'

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api-render

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: api-render/requirements.txt

      - name: 📦 Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy

      - name: 🔍 Run ruff linter
        run: |
          ruff check . --select E,F,W,C,N --statistics
          ruff check . --select I --diff  # Import sorting

      - name: 🎨 Check code formatting with black
        run: black --check --diff .
        continue-on-error: true

      - name: 📚 Check import sorting
        run: isort --check-only --diff .
        continue-on-error: true

      - name: 📝 Type checking with mypy
        run: |
          pip install types-requests
          mypy --install-types --non-interactive --ignore-missing-imports .
        continue-on-error: true

  test-api:
    name: API Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api-render

    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: api-render/requirements.txt

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov httpx faker

      - name: 🔧 Create .env file
        run: |
          echo "SUPABASE_URL=https://example.supabase.co" >> .env
          echo "SUPABASE_KEY=example-key" >> .env
          echo "OPENAI_API_KEY=sk-test" >> .env
          echo "REDDIT_CLIENT_ID=test-id" >> .env
          echo "REDDIT_CLIENT_SECRET=test-secret" >> .env
          echo "REDDIT_USER_AGENT=test-agent" >> .env

      - name: 🧪 Run unit tests
        run: |
          if [ -d "tests" ]; then
            pytest tests/unit/ -v --tb=short --cov=app --cov-report=term-missing || true
          else
            echo "No unit tests directory found"
          fi

      - name: 🌐 Test API endpoints
        run: |
          # Start the API server in background
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          SERVER_PID=$!

          # Wait for server to start
          sleep 10

          # Test health endpoint
          curl -f http://localhost:8000/health || echo "Health check failed"

          # Test API docs
          curl -f http://localhost:8000/docs || echo "API docs check failed"

          # Kill the server
          kill $SERVER_PID || true
        continue-on-error: true

      - name: 📊 Upload coverage reports
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: api-render/htmlcov/
        continue-on-error: true

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api-render

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: api-render/requirements.txt

      - name: 📦 Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit pip-audit

      - name: 🔒 Check dependencies with safety
        run: |
          pip install -r requirements.txt
          safety check --json
        continue-on-error: true

      - name: 🛡️ Security scan with bandit
        run: bandit -r . -f json -o bandit-report.json
        continue-on-error: true

      - name: 📋 Audit packages with pip-audit
        run: pip-audit
        continue-on-error: true

  performance-check:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: ./api-render

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: api-render/requirements.txt

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust memory-profiler

      - name: 🔧 Create .env file
        run: |
          echo "SUPABASE_URL=https://example.supabase.co" >> .env
          echo "SUPABASE_KEY=example-key" >> .env
          echo "OPENAI_API_KEY=sk-test" >> .env
          echo "REDDIT_CLIENT_ID=test-id" >> .env
          echo "REDDIT_CLIENT_SECRET=test-secret" >> .env
          echo "REDDIT_USER_AGENT=test-agent" >> .env

      - name: 🚀 Start API server
        run: |
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          echo $! > server.pid
          sleep 10

      - name: ⚡ Run basic load test
        run: |
          cat > locustfile.py << EOF
          from locust import HttpUser, task, between

          class APIUser(HttpUser):
              wait_time = between(1, 3)

              @task
              def health_check(self):
                  self.client.get("/health")

              @task
              def api_stats(self):
                  self.client.get("/api/stats")
          EOF

          # Run load test for 30 seconds
          locust --host=http://localhost:8000 --users 10 --spawn-rate 2 --run-time 30s --headless --html performance-report.html
        continue-on-error: true

      - name: 🛑 Stop API server
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

      - name: 📊 Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: api-render/performance-report.html
        continue-on-error: true