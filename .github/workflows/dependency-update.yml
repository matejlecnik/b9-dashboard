name: Dependency Updates

on:
  schedule:
    # Run every Sunday at 2:00 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: false
        default: 'security'
        type: choice
        options:
          - security
          - minor
          - major
          - all

jobs:
  frontend-dependencies:
    name: Frontend Dependency Updates
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./dashboard

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: dashboard/package-lock.json

      - name: 📊 Check outdated packages
        run: |
          echo "### 📦 Frontend Dependencies Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Current Package Versions" >> $GITHUB_STEP_SUMMARY
          npm list --depth=0 || true
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Outdated Packages" >> $GITHUB_STEP_SUMMARY
          npm outdated || true

      - name: 🔒 Security audit
        run: |
          echo "### 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY
          npm audit --json > audit-report.json || true

          # Parse and display vulnerabilities
          if [ -f audit-report.json ]; then
            echo "Found $(jq '.metadata.vulnerabilities.total // 0' audit-report.json) vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "- Critical: $(jq '.metadata.vulnerabilities.critical // 0' audit-report.json)" >> $GITHUB_STEP_SUMMARY
            echo "- High: $(jq '.metadata.vulnerabilities.high // 0' audit-report.json)" >> $GITHUB_STEP_SUMMARY
            echo "- Moderate: $(jq '.metadata.vulnerabilities.moderate // 0' audit-report.json)" >> $GITHUB_STEP_SUMMARY
            echo "- Low: $(jq '.metadata.vulnerabilities.low // 0' audit-report.json)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🔄 Update dependencies
        if: github.event_name == 'workflow_dispatch'
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type }}"

          case "$UPDATE_TYPE" in
            security)
              echo "Running security updates..."
              npm audit fix || true
              ;;
            minor)
              echo "Updating minor versions..."
              npm update || true
              ;;
            major)
              echo "Checking major version updates..."
              npx npm-check-updates -u || true
              npm install || true
              ;;
            all)
              echo "Updating all dependencies..."
              npx npm-check-updates -u || true
              npm install || true
              npm audit fix || true
              ;;
          esac

      - name: 🧪 Test after updates
        if: github.event_name == 'workflow_dispatch'
        run: |
          npm run build || echo "Build failed after updates"
          npm run lint || echo "Linting failed after updates"
          npm run type-check || echo "Type checking failed after updates"
        continue-on-error: true

      - name: 📈 Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: dashboard/audit-report.json
        continue-on-error: true

  backend-dependencies:
    name: Backend Dependency Updates
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api-render

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: api-render/requirements.txt

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit pip-tools safety

      - name: 📊 Check outdated packages
        run: |
          echo "### 📦 Backend Dependencies Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Current Package Versions" >> $GITHUB_STEP_SUMMARY
          pip list || true
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Outdated Packages" >> $GITHUB_STEP_SUMMARY
          pip list --outdated || true

      - name: 🔒 Security audit with safety
        run: |
          echo "### 🔒 Python Security Audit" >> $GITHUB_STEP_SUMMARY
          pip install -r requirements.txt
          safety check --json --output safety-report.json || true

          if [ -f safety-report.json ]; then
            echo "Security scan complete. Check safety-report.json for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🔍 Audit with pip-audit
        run: |
          pip-audit --desc || true
        continue-on-error: true

      - name: 🔄 Update dependencies
        if: github.event_name == 'workflow_dispatch'
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type }}"

          # Create a backup of requirements
          cp requirements.txt requirements.txt.bak

          case "$UPDATE_TYPE" in
            security)
              echo "Running security updates..."
              pip-audit --fix || true
              ;;
            minor|major|all)
              echo "Updating Python dependencies..."
              pip-compile --upgrade requirements.txt || true
              ;;
          esac

      - name: 🧪 Test after updates
        if: github.event_name == 'workflow_dispatch'
        run: |
          python -m py_compile main.py || echo "Syntax check failed"
          find . -name "*.py" -exec python -m py_compile {} \; || echo "Some files have syntax errors"
        continue-on-error: true

      - name: 📈 Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: python-security-report
          path: api-render/safety-report.json
        continue-on-error: true

  create-pr:
    name: Create Update PR
    runs-on: ubuntu-latest
    needs: [frontend-dependencies, backend-dependencies]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.update_type != 'security'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 📝 Create update branch
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type }}"
          BRANCH_NAME="deps/update-${UPDATE_TYPE}-$(date +%Y%m%d)"

          git checkout -b $BRANCH_NAME

          # Check for changes
          if git diff --exit-code; then
            echo "No changes detected"
            exit 0
          fi

          # Commit changes
          git add .
          git commit -m "chore(deps): ${UPDATE_TYPE} dependency updates

          - Updated dependencies based on ${UPDATE_TYPE} update strategy
          - Run by GitHub Actions workflow

          Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

          # Push branch
          git push origin $BRANCH_NAME

          # Create PR
          gh pr create \
            --title "chore(deps): ${UPDATE_TYPE} dependency updates" \
            --body "## 🔄 Dependency Updates

            This PR contains ${UPDATE_TYPE} dependency updates.

            ### Changes
            - Frontend dependencies updated
            - Backend dependencies updated

            ### Checklist
            - [ ] Build passes
            - [ ] Tests pass
            - [ ] No breaking changes
            - [ ] Security vulnerabilities addressed

            ---
            _Generated automatically by GitHub Actions_" \
            --base main \
            --head $BRANCH_NAME
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  dependency-report:
    name: Generate Dependency Report
    runs-on: ubuntu-latest
    needs: [frontend-dependencies, backend-dependencies]
    if: always()

    steps:
      - name: 📊 Summary report
        run: |
          echo "### 📊 Dependency Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Action Required |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-----------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ✅ Scanned | Review npm audit |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ✅ Scanned | Review pip-audit |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 📅 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review security reports" >> $GITHUB_STEP_SUMMARY
          echo "2. Test updates locally" >> $GITHUB_STEP_SUMMARY
          echo "3. Deploy to staging first" >> $GITHUB_STEP_SUMMARY
          echo "4. Monitor for issues" >> $GITHUB_STEP_SUMMARY