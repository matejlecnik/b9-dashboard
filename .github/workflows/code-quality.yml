name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./dashboard

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: dashboard/package-lock.json

      - name: 📦 Install dependencies
        run: npm ci --no-audit --no-fund

      - name: 🎨 Check code formatting
        run: |
          npm install --save-dev prettier
          npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css}" || true

      - name: 🔍 ESLint analysis
        run: |
          npm run lint -- --format json --output-file eslint-report.json || true
          npm run lint -- --format stylish

      - name: 📝 TypeScript strict check
        run: |
          # Create a stricter tsconfig for quality checks
          cat > tsconfig.strict.json << EOF
          {
            "extends": "./tsconfig.json",
            "compilerOptions": {
              "strict": true,
              "noImplicitAny": true,
              "strictNullChecks": true,
              "strictFunctionTypes": true,
              "strictBindCallApply": true,
              "strictPropertyInitialization": true,
              "noImplicitThis": true,
              "alwaysStrict": true,
              "noUnusedLocals": true,
              "noUnusedParameters": true,
              "noImplicitReturns": true,
              "noFallthroughCasesInSwitch": true
            }
          }
          EOF
          npx tsc --project tsconfig.strict.json --noEmit || true

      - name: 📊 Analyze bundle size
        run: |
          npm run build:analyze || npm run build
          if [ -d ".next" ]; then
            echo "### 📦 Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total Size | $(du -sh .next/ | cut -f1) |" >> $GITHUB_STEP_SUMMARY
            echo "| Static Assets | $(du -sh .next/static 2>/dev/null | cut -f1 || echo 'N/A') |" >> $GITHUB_STEP_SUMMARY
            echo "| Server Pages | $(find .next/server/pages -type f -name "*.js" 2>/dev/null | wc -l || echo 0) files |" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🔄 Check for circular dependencies
        run: |
          npx madge --circular src/ || true
        continue-on-error: true

      - name: 📈 Upload ESLint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: dashboard/eslint-report.json
        continue-on-error: true

  backend-quality:
    name: Backend Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: 📦 Install quality tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort pylint radon xenon

      - name: 🎨 Format check with black
        run: |
          black --check --diff . --extend-exclude="migrations|venv"
          echo "✅ Black formatting check complete"

      - name: 📚 Import sorting with isort
        run: |
          isort --check-only --diff . --skip migrations --skip venv
          echo "✅ Import sorting check complete"

      - name: 🔍 Comprehensive linting with ruff
        run: |
          ruff check . --select ALL --ignore E501,D --statistics
          echo "✅ Ruff linting complete"
        continue-on-error: true

      - name: 🧠 Code complexity analysis
        run: |
          echo "### 📊 Code Complexity Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Cyclomatic Complexity" >> $GITHUB_STEP_SUMMARY
          radon cc . -s -a || true
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Maintainability Index" >> $GITHUB_STEP_SUMMARY
          radon mi . -s || true
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Halstead Metrics" >> $GITHUB_STEP_SUMMARY
          radon hal . -f || true
        continue-on-error: true

      - name: 🏆 Code quality gates with xenon
        run: |
          xenon . --max-absolute B --max-modules B --max-average A || true
        continue-on-error: true

  documentation-quality:
    name: Documentation Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📝 Check markdown files
        run: |
          npm install -g markdownlint-cli
          markdownlint '**/*.md' --ignore node_modules --ignore .git || true

      - name: 🔗 Check for broken links
        run: |
          npm install -g markdown-link-check
          find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | xargs -I {} markdown-link-check {} || true
        continue-on-error: true

      - name: 📊 Documentation coverage
        run: |
          echo "### 📚 Documentation Coverage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Directory | .md Files |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| /docs | $(find docs -name "*.md" 2>/dev/null | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| /backend | $(find backend -name "*.md" 2>/dev/null | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| /dashboard | $(find dashboard -name "*.md" 2>/dev/null | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| Total | $(find . -name "*.md" -not -path "./node_modules/*" 2>/dev/null | wc -l) |" >> $GITHUB_STEP_SUMMARY

  code-coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup environment
        run: |
          echo "Setting up for coverage analysis..."

      - name: 📊 Generate coverage summary
        run: |
          echo "### 📊 Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Coverage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | TBD | 🚧 |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | TBD | 🚧 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Coverage reporting will be implemented in future iterations_" >> $GITHUB_STEP_SUMMARY

  quality-gate:
    name: Quality Gate Decision
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality, documentation-quality]
    if: always()

    steps:
      - name: 📊 Quality assessment
        run: |
          echo "### ✅ Quality Gate Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All quality checks have been executed. Review individual job results for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 📋 Checklist" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] No critical linting errors" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Type checking passes" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Code formatting is consistent" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Documentation is up to date" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] No high complexity code blocks" >> $GITHUB_STEP_SUMMARY